// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldShow holds the string denoting the show field in the database.
	FieldShow = "show"
	// FieldAirDate holds the string denoting the airdate field in the database.
	FieldAirDate = "air_date"
	// FieldTapeDate holds the string denoting the tapedate field in the database.
	FieldTapeDate = "tape_date"
	// EdgeSeason holds the string denoting the season edge name in mutations.
	EdgeSeason = "season"
	// Table holds the table name of the game in the database.
	Table = "games"
	// SeasonTable is the table that holds the season relation/edge.
	SeasonTable = "games"
	// SeasonInverseTable is the table name for the Season entity.
	// It exists in this package in order to avoid circular dependency with the "season" package.
	SeasonInverseTable = "seasons"
	// SeasonColumn is the table column denoting the season relation/edge.
	SeasonColumn = "season_games"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldShow,
	FieldAirDate,
	FieldTapeDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"season_games",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Game queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByShow orders the results by the show field.
func ByShow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShow, opts...).ToFunc()
}

// ByAirDate orders the results by the airDate field.
func ByAirDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAirDate, opts...).ToFunc()
}

// ByTapeDate orders the results by the tapeDate field.
func ByTapeDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTapeDate, opts...).ToFunc()
}

// BySeasonField orders the results by season field.
func BySeasonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeasonStep(), sql.OrderByField(field, opts...))
	}
}
func newSeasonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeasonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeasonTable, SeasonColumn),
	)
}
