// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------

import React, { useState } from "react";
import { useParams } from "react-router-dom";

import * as Type from "./typedefs";
import * as Diagram from "./diagram";
import * as Action from "./action";

import * as RA from "@refinedev/antd";
import { useShow } from "@refinedev/core";

export type GameEdgesDiagramProps = {
    id?: Type.JeppID;
} & RA.ShowProps;
export const GameEdgesDiagram: React.FC<GameEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.JeppGameInterface>({
        resource: "game",
        id,
        metaData: {
            fields: [
                "id",
                "show",
                "airdate",
                "tapedate",
                {
                    season: ["id", "number", "startdate", "enddate"],
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        record.season
            ? {
                  id: record.season.id || "n/a",
                  label: record.season.id || "n/a",
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        record.season
            ? {
                  source: record.id,
                  target: record.season?.id || "n/a",
                  label: "Season",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            title={"Edges Diagram"}
            headerButtons={() => (
                <>
                    <Action.GameShowAction recordItemIDs={[record.id]} />

                    <Action.GameListAction recordItemIDs={[record.id]} />

                    <Action.GameEditAction recordItemIDs={[record.id]} />

                    <Action.GameDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};

export type SeasonEdgesDiagramProps = {
    id?: Type.JeppID;
} & RA.ShowProps;
export const SeasonEdgesDiagram: React.FC<SeasonEdgesDiagramProps> = ({
    id,
    ...showProps
}) => {
    const routeParams = useParams();
    if (!id) {
        id = routeParams.id;
    }

    const { queryResult } = useShow<Type.JeppSeasonInterface>({
        resource: "season",
        id,
        metaData: {
            fields: [
                "id",
                "number",
                "startdate",
                "enddate",
                {
                    operation: "games",
                    fields: [
                        {
                            edges: [
                                {
                                    node: ["id", "show", "airdate", "tapedate"],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });
    const { data, isLoading } = queryResult;
    const record = data?.data;
    if (!record) {
        return <></>;
    }

    const nodes: Array<Diagram.Node | undefined> = [
        {
            id: record.id,
            label: record.id,
        },
        ...(record.games || []).map((i) => {
            return {
                id: i.id,
                label: i.id,
            };
        }),
        Number(record._games?.totalCount) > Number(record.games?.length)
            ? {
                  id: "Game_more",
                  label: `More ${
                      Number(record._games?.totalCount) -
                      Number(record.games?.length)
                  }`,
              }
            : undefined,
    ];
    const links: Array<Diagram.Link | undefined> = [
        ...(record.games || []).map((i) => {
            return {
                source: record.id,
                target: i.id,
                label: "Games",
            };
        }),
        Number(record._games?.totalCount) > Number(record.games?.length)
            ? {
                  source: record.id,
                  target: "Game_more",
                  label: "Games",
              }
            : undefined,
    ];

    return (
        <RA.Show
            isLoading={isLoading}
            title={"Edges Diagram"}
            headerButtons={() => (
                <>
                    <Action.SeasonShowAction recordItemIDs={[record.id]} />

                    <Action.SeasonListAction recordItemIDs={[record.id]} />

                    <Action.SeasonEditAction recordItemIDs={[record.id]} />

                    <Action.SeasonDeleteAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Diagram.GoJS
                nodes={nodes.filter(
                    (n): n is Diagram.Node => typeof n !== "undefined",
                )}
                links={links.filter(
                    (n): n is Diagram.Link => typeof n !== "undefined",
                )}
            />
        </RA.Show>
    );
};
