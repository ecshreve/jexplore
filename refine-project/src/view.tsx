// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------
import React from "react";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import { useLink } from "@refinedev/core";
import * as Show from "./show";
import * as Type from "./typedefs";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import CodeEditor, {
    TextareaCodeEditorProps,
} from "@uiw/react-textarea-code-editor";

export type ViewProps<T> = Omit<React.HTMLProps<HTMLElement>, "value"> & {
    value: T | undefined;
};

// region Date
export const JeppDateViewOnShow: React.FC<ViewProps<Date>> = ({ value }) => {
    return value ? (
        <RA.DateField format="LLL" value={value} />
    ) : (
        <RA.TextField value="Never" />
    );
};
export const JeppDateViewOnList: React.FC<ViewProps<Date>> = JeppDateViewOnShow;
export const JeppDateViewOnForm: React.FC = (props) => {
    return <Antd.DatePicker {...props} showTime={true} />;
};
// endregion Date

// region Boolean
export const JeppBooleanViewOnShow: React.FC<ViewProps<Type.JeppBoolean>> = ({
    value,
}) => {
    return <RA.TextField value={value ? "Yes" : "No"} />;
};
export const JeppBooleanViewOnList = JeppBooleanViewOnShow;
export const JeppBooleanViewOnForm: React.FC = (props) => {
    return (
        <Antd.Radio.Group {...props}>
            <Antd.Radio value={true}>Yes</Antd.Radio>
            <Antd.Radio value={false}>No</Antd.Radio>
        </Antd.Radio.Group>
    );
};
// endregion Boolean

// region String
export const JeppStringViewOnShow: React.FC<ViewProps<Type.JeppString>> = ({
    value,
}) => {
    return <Antd.Typography.Text copyable={true}>{value}</Antd.Typography.Text>;
};
export const JeppStringViewOnList: React.FC<ViewProps<Type.JeppString>> = ({
    value,
}) => {
    return (
        <Antd.Tooltip title={value}>
            <RA.TextField
                value={value}
                ellipsis={true}
                style={{ width: "100px" }}
            />
        </Antd.Tooltip>
    );
};
export const JeppStringViewOnForm: React.FC = (props) => {
    return <Antd.Input {...props} />;
};
// endregion String

// region Number
export const JeppNumberViewOnShow: React.FC<ViewProps<Type.JeppNumber>> = ({
    value,
    ...props
}) => {
    return <JeppStringViewOnShow value={String(value)} {...props} />;
};
export const JeppNumberViewOnList: React.FC<ViewProps<Type.JeppNumber>> = ({
    value,
    ...props
}) => {
    return <JeppNumberViewOnShow value={value} {...props} />;
};
export const JeppNumberViewOnForm: React.FC = (props) => {
    return <Antd.InputNumber {...props} />;
};
// endregion Number

// region String List
export const JeppStringListViewOnShow: React.FC<
    ViewProps<Type.JeppStringList>
> = ({ value }) => {
    return (
        <>
            {value?.map((v, i) => (
                <JeppStringViewOnShow
                    key={i}
                    value={String(i + 1) + ". " + v}
                />
            ))}
        </>
    );
};
export const JeppStringListViewOnList: React.FC<
    ViewProps<Type.JeppStringList>
> = ({ value }) => {
    return (
        <Antd.Typography.Text>
            {String(value?.length || 0) + " items"}
        </Antd.Typography.Text>
    );
};
export const JeppStringListViewOnForm: React.FC = (props) => {
    return <Antd.Select {...props} mode="tags" />;
};
// endregion

// region Image
export const JeppImageViewOnShow: React.FC<ViewProps<Type.JeppImage>> = ({
    value,
}) => {
    return (
        <Antd.Image style={{ width: "100%", maxWidth: "256px" }} src={value} />
    );
};
export const JeppImageViewOnList: React.FC<ViewProps<Type.JeppImage>> = ({
    value,
}) => {
    return <Antd.Image width={48} src={value} />;
};
export const JeppImageViewOnForm: React.FC = JeppStringViewOnForm;
// endregion Image

// region UUID
export const JeppUUIDViewOnShow: React.FC<ViewProps<Type.JeppUUID>> =
    JeppStringViewOnShow;
export const JeppUUIDViewOnList: React.FC<ViewProps<Type.JeppUUID>> =
    JeppStringViewOnList;
export const JeppUUIDViewOnForm: React.FC = JeppStringListViewOnForm;
// endregion UUID

// region Code
export const JeppCodeViewOnForm: React.FC<TextareaCodeEditorProps> = (
    props,
) => {
    return (
        <CodeEditor
            {...props}
            padding={15}
            style={{
                overflow: "auto",
                maxHeight: "80vh",
                minHeight: "400px",
                fontSize: 12,
                backgroundColor: "#222",
                fontFamily:
                    "ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace",
            }}
        />
    );
};
export const JeppCodeViewOnShow: React.FC<ViewProps<Type.JeppCode>> = ({
    value,
}) => {
    return <JeppCodeViewOnForm value={value} readOnly={true} />;
};
export const JeppCodeViewOnList: React.FC<ViewProps<Type.JeppCode>> = ({
    value,
}) => {
    return (
        <RA.TextField
            value={value}
            code={true}
            ellipsis={true}
            style={{ width: "100px" }}
        />
    );
};
// endregion Code

// region Rich Text
export const JeppRichTextViewOnShow: React.FC<ViewProps<Type.JeppRichText>> = ({
    value,
}) => {
    return <div dangerouslySetInnerHTML={{ __html: value || "" }}></div>;
};
export const JeppRichTextViewOnList: React.FC<ViewProps<Type.JeppRichText>> =
    JeppStringViewOnList;
export const JeppRichTextViewOnForm: React.FC = (props) => (
    <ReactQuill {...props} theme="snow" />
);
// endregion Rich Text

// region URL
export const JeppURLViewOnShow: React.FC<ViewProps<Type.JeppURL>> = ({
    value,
}) => {
    return (
        <Antd.Button
            href={value}
            target="_blank"
            icon={<AntdIcons.LinkOutlined />}
        >
            <RA.TextField
                value={value}
                ellipsis={true}
                style={{ width: "100%", maxWidth: "350px" }}
                type={"secondary"}
            />
        </Antd.Button>
    );
};
export const JeppURLViewOnList: React.FC<ViewProps<Type.JeppURL>> = ({
    value,
}) => {
    return (
        <Antd.Button
            type="primary"
            href={value}
            target="_blank"
            icon={<AntdIcons.LinkOutlined />}
        >
            Open
        </Antd.Button>
    );
};
export const JeppURLViewOnForm: React.FC = JeppStringViewOnForm;
// endregion URL

// region Enums

// endregion Enums

// region Entity Badges

export const CategoryBadge: React.FC<Partial<Type.JeppCategoryInterface>> = (
    props,
) => {
    const Link = useLink();
    return (
        <Antd.Popover
            overlayInnerStyle={{
                width: "50vw",
                height: "40vh",
                maxHeight: "400px",
                maxWidth: "500px",
                overflow: "auto",
            }}
            content={
                <Show.CategoryShow
                    breadcrumb={false}
                    title={props.id}
                    id={props.id}
                    withEdges={false}
                    headerButtons={[]}
                />
            }
        >
            <Link
                to={
                    window.environment.appPath +
                    "category/show/:id".replace(":id", String(props.id))
                }
            >
                {props.id}
            </Link>
        </Antd.Popover>
    );
};

export const ClueBadge: React.FC<Partial<Type.JeppClueInterface>> = (props) => {
    const Link = useLink();
    return (
        <Antd.Popover
            overlayInnerStyle={{
                width: "50vw",
                height: "40vh",
                maxHeight: "400px",
                maxWidth: "500px",
                overflow: "auto",
            }}
            content={
                <Show.ClueShow
                    breadcrumb={false}
                    title={props.id}
                    id={props.id}
                    withEdges={false}
                    headerButtons={[]}
                />
            }
        >
            <Link
                to={
                    window.environment.appPath +
                    "clue/show/:id".replace(":id", String(props.id))
                }
            >
                {props.id}
            </Link>
        </Antd.Popover>
    );
};

export const GameBadge: React.FC<Partial<Type.JeppGameInterface>> = (props) => {
    const Link = useLink();
    return (
        <Antd.Popover
            overlayInnerStyle={{
                width: "50vw",
                height: "40vh",
                maxHeight: "400px",
                maxWidth: "500px",
                overflow: "auto",
            }}
            content={
                <Show.GameShow
                    breadcrumb={false}
                    title={props.id}
                    id={props.id}
                    withEdges={false}
                    headerButtons={[]}
                />
            }
        >
            <Link
                to={
                    window.environment.appPath +
                    "game/show/:id".replace(":id", String(props.id))
                }
            >
                {props.id}
            </Link>
        </Antd.Popover>
    );
};

export const SeasonBadge: React.FC<Partial<Type.JeppSeasonInterface>> = (
    props,
) => {
    const Link = useLink();
    return (
        <Antd.Popover
            overlayInnerStyle={{
                width: "50vw",
                height: "40vh",
                maxHeight: "400px",
                maxWidth: "500px",
                overflow: "auto",
            }}
            content={
                <Show.SeasonShow
                    breadcrumb={false}
                    title={props.id}
                    id={props.id}
                    withEdges={false}
                    headerButtons={[]}
                />
            }
        >
            <Link
                to={
                    window.environment.appPath +
                    "season/show/:id".replace(":id", String(props.id))
                }
            >
                {props.id}
            </Link>
        </Antd.Popover>
    );
};

// endregion
