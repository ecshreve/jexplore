// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------

import React from "react";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import {
    RefineButtonSingleProps,
    RefineButtonLinkingProps,
    RefineButtonCommonProps,
} from "@refinedev/ui-types";
import { ButtonProps, Popconfirm } from "antd";
import {
    useCustomMutation,
    useNotification,
    useInvalidate,
    useLink,
} from "@refinedev/core";
import * as Custom from "./custom";
import * as Type from "./typedefs";

export type GameShowActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const GameShowAction: React.FC<GameShowActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "game/show/:id".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.EyeOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Show"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type GameListActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const GameListAction: React.FC<GameListActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "game/".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.UnorderedListOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "List"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type GameCreateActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const GameCreateAction: React.FC<GameCreateActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "game/create".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.PlusCircleOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Create"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type GameEditActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const GameEditAction: React.FC<GameEditActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "game/edit/:id".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.EditOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Edit"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type GameDeleteActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const GameDeleteAction: React.FC<GameDeleteActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = { danger: true } || {};

    const notification = useNotification();
    const { mutate, isLoading } = useCustomMutation();
    //const { mutate, isLoading } = useCustomMutation<Type.JeppGameInterface>();
    const invalidate = useInvalidate();

    return can ? (
        <Popconfirm
            key="delete"
            okText="Delete"
            cancelText="Cancel"
            okType="primary"
            title="Are you sure?"
            okButtonProps={{ disabled: isLoading }}
            onConfirm={(): void => {
                mutate(
                    {
                        method: "post",
                        url: "",
                        values: {},
                        metaData: {
                            operation: "delete",
                            variables: {
                                where: {
                                    value: {
                                        idIn: recordItemIDs,
                                    },
                                    type: "GameWhereInput",
                                    required: true,
                                },
                            },
                            fields: null || undefined,
                        },
                    },
                    {
                        onSuccess: (resp) => {
                            recordItemIDs.forEach((id: Type.JeppID) => {
                                invalidate({
                                    resource: "game",
                                    invalidates: ["resourceAll"],
                                    id,
                                });
                            });
                            notification.open?.({
                                type: "success",
                                message: `Successfully`,
                            });
                            !onSuccess || onSuccess(resp);
                        },
                        onError: (error) => {
                            notification.open?.({
                                type: "error",
                                message: error.message,
                            });
                        },
                    },
                );
            }}
        >
            <Antd.Button
                icon={<AntdIcons.DeleteOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Delete"}
            </Antd.Button>
        </Popconfirm>
    ) : null;
};

export type SeasonShowActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const SeasonShowAction: React.FC<SeasonShowActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "season/show/:id".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.EyeOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Show"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type SeasonListActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const SeasonListAction: React.FC<SeasonListActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "season/".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.UnorderedListOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "List"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type SeasonCreateActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const SeasonCreateAction: React.FC<SeasonCreateActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "season/create".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.PlusCircleOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Create"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type SeasonEditActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const SeasonEditAction: React.FC<SeasonEditActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? (
        <Link
            to={
                window.environment.appPath +
                "season/edit/:id".replace(":id", String(recordItemIDs[0]))
            }
        >
            <Antd.Button
                icon={<AntdIcons.EditOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Edit"}
            </Antd.Button>
        </Link>
    ) : null;
};

export type SeasonDeleteActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
        recordItemIDs: Type.JeppID[];
        onSuccess?: (data: any) => void;
    };

export const SeasonDeleteAction: React.FC<SeasonDeleteActionProps> = ({
    recordItemIDs,
    hideText,
    onSuccess,
    ...props
}) => {
    const can = true;
    const additionalProps = { danger: true } || {};

    const notification = useNotification();
    const { mutate, isLoading } = useCustomMutation();
    //const { mutate, isLoading } = useCustomMutation<Type.JeppSeasonInterface>();
    const invalidate = useInvalidate();

    return can ? (
        <Popconfirm
            key="delete"
            okText="Delete"
            cancelText="Cancel"
            okType="primary"
            title="Are you sure?"
            okButtonProps={{ disabled: isLoading }}
            onConfirm={(): void => {
                mutate(
                    {
                        method: "post",
                        url: "",
                        values: {},
                        metaData: {
                            operation: "delete",
                            variables: {
                                where: {
                                    value: {
                                        idIn: recordItemIDs,
                                    },
                                    type: "SeasonWhereInput",
                                    required: true,
                                },
                            },
                            fields: null || undefined,
                        },
                    },
                    {
                        onSuccess: (resp) => {
                            recordItemIDs.forEach((id: Type.JeppID) => {
                                invalidate({
                                    resource: "season",
                                    invalidates: ["resourceAll"],
                                    id,
                                });
                            });
                            notification.open?.({
                                type: "success",
                                message: `Successfully`,
                            });
                            !onSuccess || onSuccess(resp);
                        },
                        onError: (error) => {
                            notification.open?.({
                                type: "error",
                                message: error.message,
                            });
                        },
                    },
                );
            }}
        >
            <Antd.Button
                icon={<AntdIcons.DeleteOutlined />}
                {...additionalProps}
                {...props}
            >
                {hideText || "Delete"}
            </Antd.Button>
        </Popconfirm>
    ) : null;
};
