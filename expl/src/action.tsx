// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------

import React from "react";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import {
    RefineButtonSingleProps,
    RefineButtonLinkingProps,
    RefineButtonCommonProps
} from "@refinedev/ui-types";
import {ButtonProps, Popconfirm} from "antd";
import {
    useCustomMutation,
    useNotification,
    useInvalidate,
    useLink,
} from "@refinedev/core";
import * as Custom from "./custom";
import * as Type from "./typedefs";


export type CategoryListActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const CategoryListAction: React.FC<CategoryListActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "category/".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.UnorderedListOutlined/> } {...additionalProps} {...props} >
            {hideText || "List"}
        </Antd.Button>
    </Link> : null
}


export type CategoryShowActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const CategoryShowAction: React.FC<CategoryShowActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "category/show/:id".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.EyeOutlined/> } {...additionalProps} {...props} >
            {hideText || "Show"}
        </Antd.Button>
    </Link> : null
}


export type ClueListActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const ClueListAction: React.FC<ClueListActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "clue/".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.UnorderedListOutlined/> } {...additionalProps} {...props} >
            {hideText || "List"}
        </Antd.Button>
    </Link> : null
}


export type ClueShowActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const ClueShowAction: React.FC<ClueShowActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "clue/show/:id".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.EyeOutlined/> } {...additionalProps} {...props} >
            {hideText || "Show"}
        </Antd.Button>
    </Link> : null
}


export type GameListActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const GameListAction: React.FC<GameListActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "game/".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.UnorderedListOutlined/> } {...additionalProps} {...props} >
            {hideText || "List"}
        </Antd.Button>
    </Link> : null
}


export type GameShowActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const GameShowAction: React.FC<GameShowActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "game/show/:id".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.EyeOutlined/> } {...additionalProps} {...props} >
            {hideText || "Show"}
        </Antd.Button>
    </Link> : null
}


export type SeasonListActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const SeasonListAction: React.FC<SeasonListActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "season/".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.UnorderedListOutlined/> } {...additionalProps} {...props} >
            {hideText || "List"}
        </Antd.Button>
    </Link> : null
}


export type SeasonShowActionProps = ButtonProps &
    RefineButtonCommonProps &
    RefineButtonSingleProps &
    RefineButtonLinkingProps & {
    recordItemIDs: Type.JeppID[],
    onSuccess?: (data: any)=>void
}

export const SeasonShowAction: React.FC<SeasonShowActionProps> = ({recordItemIDs, hideText, onSuccess, ...props}) => {
    const can = true;
    const additionalProps = null || {};
    const Link = useLink();

    return can ? <Link to={ window.environment.appPath + "season/show/:id".replace(":id", String(recordItemIDs[0])) }>
        <Antd.Button icon={ <AntdIcons.EyeOutlined/> } {...additionalProps} {...props} >
            {hideText || "Show"}
        </Antd.Button>
    </Link> : null
}