// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------
import React, { useState } from "react";
import { useShow } from "@refinedev/core";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";

import * as Lists from "./list";
import * as Diagram from "./diagram";
import * as Interfaces from "./typedefs";
import * as View from "./view";
import * as Custom from "./custom";
import * as Action from "./action";

export type CategoryShowProps = {
    id?: Interfaces.JeppID;
    withEdges?: boolean;
} & RA.ShowProps;
export const CategoryShow: React.FC<CategoryShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.JeppCategoryInterface>({
        resource: "category",
        id,
        metaData: {
            fields: [
                "id",
                "name",
                {
                    operation: "clues",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "question",
                                        "answer",
                                        "categoryID",
                                        "gameID",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.CategoryListAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Name</Antd.Typography.Title>
            <View.JeppStringViewOnShow value={record?.name} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions></Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.QuestionCircleOutlined />
                                        Clues
                                    </span>
                                ),
                                key: "0",
                                children: (
                                    <Lists.ClueList
                                        key={"clues-categories"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasCategoryWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const CategoryMainShow: React.FC = () => {
    return <CategoryShow withEdges={true} />;
};

export const CategoryPartialShow: React.FC = () => {
    return <CategoryShow withEdges={false} />;
};

export type ClueShowProps = {
    id?: Interfaces.JeppID;
    withEdges?: boolean;
} & RA.ShowProps;
export const ClueShow: React.FC<ClueShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.JeppClueInterface>({
        resource: "clue",
        id,
        metaData: {
            fields: [
                "id",
                "question",
                "answer",
                "categoryID",
                "gameID",
                {
                    category: ["id", "name"],
                },
                {
                    game: ["id", "show", "airdate", "tapedate", "seasonID"],
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.ClueListAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Question</Antd.Typography.Title>
            <View.JeppStringViewOnShow value={record?.question} />
            <Antd.Typography.Title level={5}>Answer</Antd.Typography.Title>
            <View.JeppStringViewOnShow value={record?.answer} />
            <Antd.Typography.Title level={5}>Category Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.categoryID} />
            <Antd.Typography.Title level={5}>Game Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.gameID} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Category">
                            <View.CategoryBadge {...record?.category} />
                        </Antd.Descriptions.Item>
                        <Antd.Descriptions.Item label="Game">
                            <View.GameBadge {...record?.game} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs defaultActiveKey="0" items={[]} />
                </>
            ) : null}
        </RA.Show>
    );
};

export const ClueMainShow: React.FC = () => {
    return <ClueShow withEdges={true} />;
};

export const CluePartialShow: React.FC = () => {
    return <ClueShow withEdges={false} />;
};

export type GameShowProps = {
    id?: Interfaces.JeppID;
    withEdges?: boolean;
} & RA.ShowProps;
export const GameShow: React.FC<GameShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.JeppGameInterface>({
        resource: "game",
        id,
        metaData: {
            fields: [
                "id",
                "show",
                "airdate",
                "tapedate",
                "seasonID",
                {
                    season: ["id", "number", "startdate", "enddate"],
                },
                {
                    operation: "clues",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "question",
                                        "answer",
                                        "categoryID",
                                        "gameID",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.GameListAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Show</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.show} />
            <Antd.Typography.Title level={5}>AirDate</Antd.Typography.Title>
            <View.JeppDateViewOnShow value={record?.airdate} />
            <Antd.Typography.Title level={5}>TapeDate</Antd.Typography.Title>
            <View.JeppDateViewOnShow value={record?.tapedate} />
            <Antd.Typography.Title level={5}>Season Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.seasonID} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions>
                        <Antd.Descriptions.Item label="Season">
                            <View.SeasonBadge {...record?.season} />
                        </Antd.Descriptions.Item>
                    </Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.QuestionCircleOutlined />
                                        Clues
                                    </span>
                                ),
                                key: "1",
                                children: (
                                    <Lists.ClueList
                                        key={"clues-games"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasGameWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const GameMainShow: React.FC = () => {
    return <GameShow withEdges={true} />;
};

export const GamePartialShow: React.FC = () => {
    return <GameShow withEdges={false} />;
};

export type SeasonShowProps = {
    id?: Interfaces.JeppID;
    withEdges?: boolean;
} & RA.ShowProps;
export const SeasonShow: React.FC<SeasonShowProps> = ({
    id,
    withEdges,
    ...showProps
}) => {
    const { queryResult } = useShow<Interfaces.JeppSeasonInterface>({
        resource: "season",
        id,
        metaData: {
            fields: [
                "id",
                "number",
                "startdate",
                "enddate",
                {
                    operation: "games",
                    fields: [
                        {
                            edges: [
                                {
                                    node: [
                                        "id",
                                        "show",
                                        "airdate",
                                        "tapedate",
                                        "seasonID",
                                    ],
                                },
                            ],
                        },
                        "totalCount",
                    ],
                    variables: {
                        first: 10,
                    },
                },
            ],
        },
    });

    const { data, isLoading } = queryResult;
    const record = data?.data;

    if (!record) {
        return <></>;
    }

    return (
        <RA.Show
            isLoading={isLoading}
            headerButtons={() => (
                <>
                    <Action.SeasonListAction recordItemIDs={[record.id]} />
                </>
            )}
            {...showProps}
        >
            <Antd.Typography.Title level={5}>Id</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.id} />
            <Antd.Typography.Title level={5}>Number</Antd.Typography.Title>
            <View.JeppNumberViewOnShow value={record?.number} />
            <Antd.Typography.Title level={5}>StartDate</Antd.Typography.Title>
            <View.JeppDateViewOnShow value={record?.startdate} />
            <Antd.Typography.Title level={5}>EndDate</Antd.Typography.Title>
            <View.JeppDateViewOnShow value={record?.enddate} />

            {withEdges ? (
                <>
                    <Antd.Typography.Title level={3}>
                        Edges
                    </Antd.Typography.Title>
                    <Antd.Descriptions></Antd.Descriptions>
                    <Antd.Tabs
                        defaultActiveKey="0"
                        items={[
                            {
                                label: (
                                    <span>
                                        <AntdIcons.PlusSquareOutlined />
                                        Games
                                    </span>
                                ),
                                key: "0",
                                children: (
                                    <Lists.GameList
                                        key={"games-seasons"}
                                        breadcrumb={false}
                                        tableProps={{
                                            extendTable: {
                                                permanentFilter: [
                                                    {
                                                        operator:
                                                            "hasSeasonWith" as any,
                                                        field: "",
                                                        value: {
                                                            id: record?.id,
                                                        },
                                                    },
                                                ],
                                            },
                                        }}
                                    />
                                ),
                            },
                        ]}
                    />
                </>
            ) : null}
        </RA.Show>
    );
};

export const SeasonMainShow: React.FC = () => {
    return <SeasonShow withEdges={true} />;
};

export const SeasonPartialShow: React.FC = () => {
    return <SeasonShow withEdges={false} />;
};
