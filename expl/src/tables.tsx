// Code generated by EntKit. DO NOT EDIT.
// ---------------------------------------------------------
//
// Copyright (C) 2023 EntKit. All Rights Reserved.
//
// This code is part of the EntKit library and is generated
// automatically to ensure optimal functionality and maintainability.
// Any changes made directly to this file may be overwritten
// by future code generation, leading to unexpected behavior.
//
// Please refer to the EntKit documentation for instructions on
// how to modify the library, extend its functionality or contribute
// to the project: https://entkit.com
// ---------------------------------------------------------

import React, {useState} from "react";
import {HttpError} from "@refinedev/core";
import * as RA from "@refinedev/antd";
import * as Antd from "antd";
import * as AntdIcons from "@ant-design/icons";
import * as Interfaces from "./typedefs";
import { Cursors } from "./data-provider";
import * as Custom from "./custom";
import * as View from "./view";
import * as Action from "./action";

export type CategoryTableProps = Antd.TableProps<Interfaces.JeppCategoryInterface>
    & {
        extendTable?: RA.useTableProps<
            Interfaces.JeppCategoryInterface,
            HttpError,
            any,
            Interfaces.JeppCategoryInterface
        >
    }
export const CategoryTable :React.FC<CategoryTableProps> = ({extendTable, ...props} ) => {

    const [cursors, setCursors] = useState<Cursors>({first: 10,})
    const [perPage, setPerPage] = useState<number>(10)
    const table = RA.useTable<Interfaces.JeppCategoryInterface>({
        resource: "category",
        initialSorter: [
            {
                field: "id",
                order: "asc",
            },
        ],
        initialFilter: [
            {
                field: "id",
                value: null,
                operator: "contains",
            },{
                field: "name",
                value: null,
                operator: "contains",
            },],
        metaData: {
            fields: [
                "id",
                "name",
                {"clues": [
                    /*{
                        edges: [
                            {
                                node: [
                                    "id",
                                    "question",
                                    "answer",
                                    "categoryID",
                                    "gameID",
                                ]
                            },
                        ],
                    },*/
                    "totalCount",
                ]},
            ],
            cursors,
        },
        hasPagination: true,
        ...extendTable,
    });

    const data = table.tableQueryResult.data as any

    return (
        <>
            <Antd.Table {...table.tableProps} pagination={false} rowKey="id" {...props}>
                { /* region Fields */ }
                <Antd.Table.Column
                    dataIndex="id"
                    title="Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("id", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="name"
                    title="Name"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppStringViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("name", table.sorter)}
                />
                {/* endregion */}

                { /* region Edges */ }
                <Antd.Table.Column
                    dataIndex="clues"
                    title="Clues"
                    render={
                        (value)=><span>{ value?.totalCount || "No" } Items</span>
                    }
                />
                {/* endregion Edges*/}

                <Antd.Table.Column<Interfaces.JeppCategoryInterface>
                    title="Actions"
                    dataIndex="actions"
                    render={(_, record) => (
                        <Antd.Space>
                            <Action.CategoryShowAction
                                recordItemIDs={ [record.id] }
                                size="small"
                                hideText={true}
                            />
                        </Antd.Space>
                    )}
                />
            </Antd.Table>

            <Antd.Space style={ {marginTop: 20} }>
                <Antd.Typography.Text type="secondary">Total {data?.total || 0}</Antd.Typography.Text>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasPreviousPage)}
                    onClick={() => {
                        setCursors((ov)=>({
                            ...ov,
                            before: data?.pageInfo?.startCursor,
                            last: perPage,
                            after: undefined,
                            first: undefined,
                        }))
                    }
                    }>
                    <AntdIcons.LeftOutlined/>
                    Prev
                </Antd.Button>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasNextPage)}
                    onClick={() => {
                        setCursors((ov)=>{
                            return {
                                ...ov,
                                after: data?.pageInfo?.endCursor,
                                first: perPage,
                                before: undefined,
                                last: undefined,
                            }
                        })
                    }}>
                    Next
                    <AntdIcons.RightOutlined/>
                </Antd.Button>
                <Antd.Select
                    labelInValue
                    defaultValue={ { value: 10, label: '10 / page' } }
                    style={ { width: 110 } }
                    onChange={(value)=>{
                        setPerPage(value.value)
                        setCursors((ov)=>({
                            ...ov,
                            // Return to first page
                            first: value.value,
                            last: undefined,
                            before: undefined,
                            after: undefined,
                        }))
                    }}
                    options={[
                        {value: 10, label: '10 / page'},
                        {value: 20, label: '20 / page'},
                        {value: 50, label: '50 / page'},
                        {value: 100, label: '100 / page'},
                    ]}
                />
            </Antd.Space>
        </>
    );
};export type ClueTableProps = Antd.TableProps<Interfaces.JeppClueInterface>
    & {
        extendTable?: RA.useTableProps<
            Interfaces.JeppClueInterface,
            HttpError,
            any,
            Interfaces.JeppClueInterface
        >
    }
export const ClueTable :React.FC<ClueTableProps> = ({extendTable, ...props} ) => {

    const [cursors, setCursors] = useState<Cursors>({first: 10,})
    const [perPage, setPerPage] = useState<number>(10)
    const table = RA.useTable<Interfaces.JeppClueInterface>({
        resource: "clue",
        initialSorter: [
            {
                field: "id",
                order: "asc",
            },
        ],
        initialFilter: [
            {
                field: "id",
                value: null,
                operator: "contains",
            },{
                field: "question",
                value: null,
                operator: "contains",
            },{
                field: "answer",
                value: null,
                operator: "contains",
            },{
                field: "categoryID",
                value: null,
                operator: "contains",
            },{
                field: "gameID",
                value: null,
                operator: "contains",
            },],
        metaData: {
            fields: [
                "id",
                "question",
                "answer",
                "categoryID",
                "gameID",
                {
                    "category": [
                        "id",
                        "name",
                    ]
                },
                {
                    "game": [
                        "id",
                        "show",
                        "airDate",
                        "tapeDate",
                        "seasonID",
                    ]
                },
            ],
            cursors,
        },
        hasPagination: true,
        ...extendTable,
    });

    const data = table.tableQueryResult.data as any

    return (
        <>
            <Antd.Table {...table.tableProps} pagination={false} rowKey="id" {...props}>
                { /* region Fields */ }
                <Antd.Table.Column
                    dataIndex="id"
                    title="Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("id", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="question"
                    title="Question"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppStringViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("question", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="answer"
                    title="Answer"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppStringViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("answer", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="categoryID"
                    title="Category Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("category_id", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="gameID"
                    title="Game Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("game_id", table.sorter)}
                />
                {/* endregion */}

                { /* region Edges */ }
                <Antd.Table.Column
                    dataIndex="category"
                    title="Category"
                    render={
                        (value)=>(<View.CategoryBadge { ...value } />)
                    }
                />
                <Antd.Table.Column
                    dataIndex="game"
                    title="Game"
                    render={
                        (value)=>(<View.GameBadge { ...value } />)
                    }
                />
                {/* endregion Edges*/}

                <Antd.Table.Column<Interfaces.JeppClueInterface>
                    title="Actions"
                    dataIndex="actions"
                    render={(_, record) => (
                        <Antd.Space>
                            <Action.ClueShowAction
                                recordItemIDs={ [record.id] }
                                size="small"
                                hideText={true}
                            />
                        </Antd.Space>
                    )}
                />
            </Antd.Table>

            <Antd.Space style={ {marginTop: 20} }>
                <Antd.Typography.Text type="secondary">Total {data?.total || 0}</Antd.Typography.Text>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasPreviousPage)}
                    onClick={() => {
                        setCursors((ov)=>({
                            ...ov,
                            before: data?.pageInfo?.startCursor,
                            last: perPage,
                            after: undefined,
                            first: undefined,
                        }))
                    }
                    }>
                    <AntdIcons.LeftOutlined/>
                    Prev
                </Antd.Button>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasNextPage)}
                    onClick={() => {
                        setCursors((ov)=>{
                            return {
                                ...ov,
                                after: data?.pageInfo?.endCursor,
                                first: perPage,
                                before: undefined,
                                last: undefined,
                            }
                        })
                    }}>
                    Next
                    <AntdIcons.RightOutlined/>
                </Antd.Button>
                <Antd.Select
                    labelInValue
                    defaultValue={ { value: 10, label: '10 / page' } }
                    style={ { width: 110 } }
                    onChange={(value)=>{
                        setPerPage(value.value)
                        setCursors((ov)=>({
                            ...ov,
                            // Return to first page
                            first: value.value,
                            last: undefined,
                            before: undefined,
                            after: undefined,
                        }))
                    }}
                    options={[
                        {value: 10, label: '10 / page'},
                        {value: 20, label: '20 / page'},
                        {value: 50, label: '50 / page'},
                        {value: 100, label: '100 / page'},
                    ]}
                />
            </Antd.Space>
        </>
    );
};export type GameTableProps = Antd.TableProps<Interfaces.JeppGameInterface>
    & {
        extendTable?: RA.useTableProps<
            Interfaces.JeppGameInterface,
            HttpError,
            any,
            Interfaces.JeppGameInterface
        >
    }
export const GameTable :React.FC<GameTableProps> = ({extendTable, ...props} ) => {

    const [cursors, setCursors] = useState<Cursors>({first: 10,})
    const [perPage, setPerPage] = useState<number>(10)
    const table = RA.useTable<Interfaces.JeppGameInterface>({
        resource: "game",
        initialSorter: [
            {
                field: "id",
                order: "asc",
            },
        ],
        initialFilter: [
            {
                field: "id",
                value: null,
                operator: "contains",
            },{
                field: "show",
                value: null,
                operator: "contains",
            },{
                field: "airDate",
                value: null,
                operator: "contains",
            },{
                field: "tapeDate",
                value: null,
                operator: "contains",
            },{
                field: "seasonID",
                value: null,
                operator: "contains",
            },],
        metaData: {
            fields: [
                "id",
                "show",
                "airDate",
                "tapeDate",
                "seasonID",
                {
                    "season": [
                        "id",
                        "number",
                        "startDate",
                        "endDate",
                    ]
                },
                {"clues": [
                    /*{
                        edges: [
                            {
                                node: [
                                    "id",
                                    "question",
                                    "answer",
                                    "categoryID",
                                    "gameID",
                                ]
                            },
                        ],
                    },*/
                    "totalCount",
                ]},
            ],
            cursors,
        },
        hasPagination: true,
        ...extendTable,
    });

    const data = table.tableQueryResult.data as any

    return (
        <>
            <Antd.Table {...table.tableProps} pagination={false} rowKey="id" {...props}>
                { /* region Fields */ }
                <Antd.Table.Column
                    dataIndex="id"
                    title="Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("id", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="show"
                    title="Show"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("show", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="airDate"
                    title="Air Date"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppDateViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("air_date", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="tapeDate"
                    title="Tape Date"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppDateViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("tape_date", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="seasonID"
                    title="Season Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("season_id", table.sorter)}
                />
                {/* endregion */}

                { /* region Edges */ }
                <Antd.Table.Column
                    dataIndex="season"
                    title="Season"
                    render={
                        (value)=>(<View.SeasonBadge { ...value } />)
                    }
                />
                <Antd.Table.Column
                    dataIndex="clues"
                    title="Clues"
                    render={
                        (value)=><span>{ value?.totalCount || "No" } Items</span>
                    }
                />
                {/* endregion Edges*/}

                <Antd.Table.Column<Interfaces.JeppGameInterface>
                    title="Actions"
                    dataIndex="actions"
                    render={(_, record) => (
                        <Antd.Space>
                            <Action.GameShowAction
                                recordItemIDs={ [record.id] }
                                size="small"
                                hideText={true}
                            />
                        </Antd.Space>
                    )}
                />
            </Antd.Table>

            <Antd.Space style={ {marginTop: 20} }>
                <Antd.Typography.Text type="secondary">Total {data?.total || 0}</Antd.Typography.Text>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasPreviousPage)}
                    onClick={() => {
                        setCursors((ov)=>({
                            ...ov,
                            before: data?.pageInfo?.startCursor,
                            last: perPage,
                            after: undefined,
                            first: undefined,
                        }))
                    }
                    }>
                    <AntdIcons.LeftOutlined/>
                    Prev
                </Antd.Button>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasNextPage)}
                    onClick={() => {
                        setCursors((ov)=>{
                            return {
                                ...ov,
                                after: data?.pageInfo?.endCursor,
                                first: perPage,
                                before: undefined,
                                last: undefined,
                            }
                        })
                    }}>
                    Next
                    <AntdIcons.RightOutlined/>
                </Antd.Button>
                <Antd.Select
                    labelInValue
                    defaultValue={ { value: 10, label: '10 / page' } }
                    style={ { width: 110 } }
                    onChange={(value)=>{
                        setPerPage(value.value)
                        setCursors((ov)=>({
                            ...ov,
                            // Return to first page
                            first: value.value,
                            last: undefined,
                            before: undefined,
                            after: undefined,
                        }))
                    }}
                    options={[
                        {value: 10, label: '10 / page'},
                        {value: 20, label: '20 / page'},
                        {value: 50, label: '50 / page'},
                        {value: 100, label: '100 / page'},
                    ]}
                />
            </Antd.Space>
        </>
    );
};export type SeasonTableProps = Antd.TableProps<Interfaces.JeppSeasonInterface>
    & {
        extendTable?: RA.useTableProps<
            Interfaces.JeppSeasonInterface,
            HttpError,
            any,
            Interfaces.JeppSeasonInterface
        >
    }
export const SeasonTable :React.FC<SeasonTableProps> = ({extendTable, ...props} ) => {

    const [cursors, setCursors] = useState<Cursors>({first: 10,})
    const [perPage, setPerPage] = useState<number>(10)
    const table = RA.useTable<Interfaces.JeppSeasonInterface>({
        resource: "season",
        initialSorter: [
            {
                field: "id",
                order: "asc",
            },
        ],
        initialFilter: [
            {
                field: "id",
                value: null,
                operator: "contains",
            },{
                field: "number",
                value: null,
                operator: "contains",
            },{
                field: "startDate",
                value: null,
                operator: "contains",
            },{
                field: "endDate",
                value: null,
                operator: "contains",
            },],
        metaData: {
            fields: [
                "id",
                "number",
                "startDate",
                "endDate",
                {"games": [
                    /*{
                        edges: [
                            {
                                node: [
                                    "id",
                                    "show",
                                    "airDate",
                                    "tapeDate",
                                    "seasonID",
                                ]
                            },
                        ],
                    },*/
                    "totalCount",
                ]},
            ],
            cursors,
        },
        hasPagination: true,
        ...extendTable,
    });

    const data = table.tableQueryResult.data as any

    return (
        <>
            <Antd.Table {...table.tableProps} pagination={false} rowKey="id" {...props}>
                { /* region Fields */ }
                <Antd.Table.Column
                    dataIndex="id"
                    title="Id"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("id", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="number"
                    title="Number"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppNumberViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("number", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="startDate"
                    title="Start Date"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppDateViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("start_date", table.sorter)}
                />
                <Antd.Table.Column
                    dataIndex="endDate"
                    title="End Date"
                    sorter={
                        {}
                    }
                    render={ (value)=> {
                        return <View.JeppDateViewOnList value={ value } />
                    } }
                    filterDropdown={(props) => (
                        <RA.FilterDropdown {...props}>
                            <Antd.Input />
                        </RA.FilterDropdown>
                    )}
                    defaultSortOrder={RA.getDefaultSortOrder("end_date", table.sorter)}
                />
                {/* endregion */}

                { /* region Edges */ }
                <Antd.Table.Column
                    dataIndex="games"
                    title="Games"
                    render={
                        (value)=><span>{ value?.totalCount || "No" } Items</span>
                    }
                />
                {/* endregion Edges*/}

                <Antd.Table.Column<Interfaces.JeppSeasonInterface>
                    title="Actions"
                    dataIndex="actions"
                    render={(_, record) => (
                        <Antd.Space>
                            <Action.SeasonShowAction
                                recordItemIDs={ [record.id] }
                                size="small"
                                hideText={true}
                            />
                        </Antd.Space>
                    )}
                />
            </Antd.Table>

            <Antd.Space style={ {marginTop: 20} }>
                <Antd.Typography.Text type="secondary">Total {data?.total || 0}</Antd.Typography.Text>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasPreviousPage)}
                    onClick={() => {
                        setCursors((ov)=>({
                            ...ov,
                            before: data?.pageInfo?.startCursor,
                            last: perPage,
                            after: undefined,
                            first: undefined,
                        }))
                    }
                    }>
                    <AntdIcons.LeftOutlined/>
                    Prev
                </Antd.Button>
                <Antd.Button
                    disabled={!Boolean(data?.pageInfo?.hasNextPage)}
                    onClick={() => {
                        setCursors((ov)=>{
                            return {
                                ...ov,
                                after: data?.pageInfo?.endCursor,
                                first: perPage,
                                before: undefined,
                                last: undefined,
                            }
                        })
                    }}>
                    Next
                    <AntdIcons.RightOutlined/>
                </Antd.Button>
                <Antd.Select
                    labelInValue
                    defaultValue={ { value: 10, label: '10 / page' } }
                    style={ { width: 110 } }
                    onChange={(value)=>{
                        setPerPage(value.value)
                        setCursors((ov)=>({
                            ...ov,
                            // Return to first page
                            first: value.value,
                            last: undefined,
                            before: undefined,
                            after: undefined,
                        }))
                    }}
                    options={[
                        {value: 10, label: '10 / page'},
                        {value: 20, label: '20 / page'},
                        {value: 50, label: '50 / page'},
                        {value: 100, label: '100 / page'},
                    ]}
                />
            </Antd.Space>
        </>
    );
};