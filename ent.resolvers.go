package jexplore

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/ecshreve/jexplore/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.GameOrder, where *ent.GameWhereInput, q *string) (*ent.GameConnection, error) {
	return r.client.Game.Query().Paginate(ctx, after, first, before, last, ent.WithGameFilter(where.Filter), ent.WithGameOrder(orderBy))
}

// Seasons is the resolver for the seasons field.
func (r *queryResolver) Seasons(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.SeasonOrder, where *ent.SeasonWhereInput, q *string) (*ent.SeasonConnection, error) {
	return r.client.Season.Query().Paginate(ctx, after, first, before, last, ent.WithSeasonFilter(where.Filter), ent.WithSeasonOrder(orderBy))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
