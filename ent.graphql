directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateSeasonInput is used for create Season object.
Input was generated by ent.
"""
input CreateSeasonInput {
  number: Int!
  startdate: Time!
  enddate: Time!
  gameIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Game implements Node {
  id: ID!
  show: Int!
  airdate: Time! @goField(name: "AirDate", forceResolver: false)
  tapedate: Time! @goField(name: "TapeDate", forceResolver: false)
  season: Season
}
"""A connection to a list of items."""
type GameConnection {
  """A list of edges."""
  edges: [GameEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Game connections"""
input GameOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Games."""
  field: GameOrderField!
}
"""Properties by which Game connections can be ordered."""
enum GameOrderField {
  SHOW
  AIR_DATE
  TAPE_DATE
}
"""
GameWhereInput is used for filtering Game objects.
Input was generated by ent.
"""
input GameWhereInput {
  not: GameWhereInput
  and: [GameWhereInput!]
  or: [GameWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """show field predicates"""
  show: Int
  showNEQ: Int
  showIn: [Int!]
  showNotIn: [Int!]
  showGT: Int
  showGTE: Int
  showLT: Int
  showLTE: Int
  """airDate field predicates"""
  airdate: Time
  airdateNEQ: Time
  airdateIn: [Time!]
  airdateNotIn: [Time!]
  airdateGT: Time
  airdateGTE: Time
  airdateLT: Time
  airdateLTE: Time
  """tapeDate field predicates"""
  tapedate: Time
  tapedateNEQ: Time
  tapedateIn: [Time!]
  tapedateNotIn: [Time!]
  tapedateGT: Time
  tapedateGTE: Time
  tapedateLT: Time
  tapedateLTE: Time
  """season edge predicates"""
  hasSeason: Boolean
  hasSeasonWith: [SeasonWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/ecshreve/jexplore/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  games(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Games returned from the connection."""
    orderBy: GameOrder

    """Filtering options for Games returned from the connection."""
    where: GameWhereInput

    """Search query"""
    q: String
  ): GameConnection!
  seasons(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Seasons returned from the connection."""
    orderBy: SeasonOrder

    """Filtering options for Seasons returned from the connection."""
    where: SeasonWhereInput

    """Search query"""
    q: String
  ): SeasonConnection!
}
type Season implements Node {
  id: ID!
  number: Int!
  startdate: Time! @goField(name: "StartDate", forceResolver: false)
  enddate: Time! @goField(name: "EndDate", forceResolver: false)
  games(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Games returned from the connection."""
    orderBy: GameOrder

    """Filtering options for Games returned from the connection."""
    where: GameWhereInput
  ): GameConnection!
}
"""A connection to a list of items."""
type SeasonConnection {
  """A list of edges."""
  edges: [SeasonEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type SeasonEdge {
  """The item at the end of the edge."""
  node: Season
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Season connections"""
input SeasonOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Seasons."""
  field: SeasonOrderField!
}
"""Properties by which Season connections can be ordered."""
enum SeasonOrderField {
  NUMBER
  START_DATE
  END_DATE
}
"""
SeasonWhereInput is used for filtering Season objects.
Input was generated by ent.
"""
input SeasonWhereInput {
  not: SeasonWhereInput
  and: [SeasonWhereInput!]
  or: [SeasonWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """number field predicates"""
  number: Int
  numberNEQ: Int
  numberIn: [Int!]
  numberNotIn: [Int!]
  numberGT: Int
  numberGTE: Int
  numberLT: Int
  numberLTE: Int
  """startDate field predicates"""
  startdate: Time
  startdateNEQ: Time
  startdateIn: [Time!]
  startdateNotIn: [Time!]
  startdateGT: Time
  startdateGTE: Time
  startdateLT: Time
  startdateLTE: Time
  """endDate field predicates"""
  enddate: Time
  enddateNEQ: Time
  enddateIn: [Time!]
  enddateNotIn: [Time!]
  enddateGT: Time
  enddateGTE: Time
  enddateLT: Time
  enddateLTE: Time
  """games edge predicates"""
  hasGames: Boolean
  hasGamesWith: [GameWhereInput!]
}
"""The builtin Time type"""
scalar Time
